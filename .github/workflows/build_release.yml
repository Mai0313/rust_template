name: Build and Release

on:
  push:
    tags:
      - v*
  workflow_dispatch:

permissions: write-all

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.runner }} - ${{ matrix.target }}
    runs-on: ${{ matrix.runner }}

    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: macos-14
            target: aarch64-apple-darwin
            friendly_id: macos-arm64
          - runner: macos-14
            target: x86_64-apple-darwin
            friendly_id: macos-x64
          - runner: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            friendly_id: linux-x64-gnu
          - runner: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            friendly_id: linux-arm64-gnu
          - runner: windows-latest
            target: x86_64-pc-windows-msvc
            friendly_id: windows-x64
          - runner: windows-11-arm
            target: aarch64-pc-windows-msvc
            friendly_id: windows-arm64

    steps:
      - name: Disable SSL Verify
        run: git config --global http.sslVerify false

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cargo build (release)
        run: |
          cargo build --target ${{ matrix.target }} --release --locked --bin ${{ github.event.repository.name }}

      - name: Stage Artifact
        shell: bash
        run: |
          set -euo pipefail
          dest="dist/${{ matrix.target }}"
          mkdir -p "$dest"
          bin_dir="target/${{ matrix.target }}/release"
          bin="${{ github.event.repository.name }}"
          if [[ "${{ matrix.runner }}" == windows* ]]; then
            bin="${bin}.exe"
          fi
          # Copy only the binary to avoid uploading sidecar files like *.d
          cp "${bin_dir}/${bin}" "${dest}/${bin}"

      - name: Create .zip (Windows)
        shell: powershell
        if: ${{ startsWith(matrix.runner, 'windows') }}
        run: |
          $ErrorActionPreference = "Stop"
          $dest = "dist/${{ matrix.target }}"
          $version = "${env:GITHUB_REF_NAME}".Substring(1)
          $bin = "${{ github.event.repository.name }}.exe"
          $zip = "${{ github.event.repository.name }}-v$version-${{ matrix.friendly_id }}.zip"
          Compress-Archive -Path "$dest\$bin" -DestinationPath "$dest\$zip" -Force

      - name: Create .tar.gz (all platforms)
        shell: bash
        if: ${{ !startsWith(matrix.runner, 'windows') }}
        run: |
          set -euo pipefail
          dest="dist/${{ matrix.target }}"
          version="${GITHUB_REF_NAME#v}"
          bin="${{ github.event.repository.name }}"
          archive="${{ github.event.repository.name }}-v${version}-${{ matrix.friendly_id }}.tar.gz"
          # Try to include .exe if present, otherwise fall back to unix name
          tar -C "$dest" -czf "$dest/${archive}" "${bin}" "${bin}.exe" 2>/dev/null || \
          tar -C "$dest" -czf "$dest/${archive}" "${bin}"
          # Remove raw binaries after archiving to avoid accidental upload
          rm -f "$dest/${bin}" "$dest/${bin}.exe" || true

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.friendly_id }}
          path: dist/${{ matrix.target }}/*
          if-no-files-found: error
          retention-days: 7
          compression-level: 6
          overwrite: true

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**/*

  publish-npm:
    name: Publish to npm - ${{ matrix.scope && format('{0}/', matrix.scope) || '' }}${{ matrix.name }}
    needs: build
    runs-on: ubuntu-latest

    permissions:
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "${{ github.event.repository.name }}"
            scope: "@mai0313"
          - name: rusttemp
            scope: "@mai0313"
          - name: "${{ github.event.repository.name }}"
            scope: ""

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org

      - name: Update npm
        run: |
          npm update -g

      - name: Extract version from tag
        id: version
        run: |
          VERSION="${GITHUB_REF_NAME#v}"
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "Publishing version: ${VERSION}"

      - name: Download and extract build artifacts
        uses: actions/download-artifact@v4
        with:
          path: cli/binaries/temp
          merge-multiple: true

      - name: Extract binaries from archives
        working-directory: cli/binaries/temp
        run: |
          for archive in *; do
            platform=$(echo "$archive" | sed -E 's/^${{ github.event.repository.name }}-v[0-9]+\.[0-9]+\.[0-9]+-//')
            platform="${platform%.tar.gz}"
            platform="${platform%.zip}"

            echo "Extracting $archive to $platform/"
            mkdir -p "../$platform"

            case "$archive" in
              *.tar.gz) tar -xzf "$archive" -C "../$platform" ;;
              *.zip)    unzip -q "$archive" -d "../$platform" ;;
            esac
          done

      - name: Cleanup and verify
        run: |
          rm -rf cli/binaries/temp
          echo "Extracted binaries:" && ls -lhR cli/binaries/

      - name: Update package.json version and name
        working-directory: cli
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          PACKAGE_NAME="${{ matrix.name }}"
          SCOPE="${{ matrix.scope }}"

          # Update version
          npm version ${VERSION} --no-git-tag-version

          # Update package name with scope if present
          if [ -n "${SCOPE}" ]; then
            FULL_NAME="${SCOPE}/${PACKAGE_NAME}"
          else
            FULL_NAME="${PACKAGE_NAME}"
          fi

          # Use jq to update package name
          cat package.json | jq --arg name "${FULL_NAME}" '.name = $name' > package.json.tmp
          mv package.json.tmp package.json

          echo "Updated package.json:"
          cat package.json

      - name: Copy README for npm
        run: cp README.md cli/README.md

      - name: Publish to npm with provenance
        working-directory: cli
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
        run: |
          npm publish --provenance --access public

      - name: Verify publication
        working-directory: cli
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          PACKAGE_NAME="${{ matrix.name }}"
          SCOPE="${{ matrix.scope }}"

          if [ -n "${SCOPE}" ]; then
            FULL_NAME="${SCOPE}/${PACKAGE_NAME}"
          else
            FULL_NAME="${PACKAGE_NAME}"
          fi

          echo "Waiting for npm registry to update..."
          sleep 10

          # Check if version is available
          PUBLISHED_VERSION=$(npm view ${FULL_NAME}@${VERSION} version 2>/dev/null || echo "")

          if [ "${PUBLISHED_VERSION}" = "${VERSION}" ]; then
            echo "âœ“ Successfully published ${FULL_NAME}@${VERSION}"
            echo "Install with: npm install -g ${FULL_NAME}"
          else
            echo "Warning: Could not immediately verify publication"
            echo "Please check: https://www.npmjs.com/package/${FULL_NAME}"
          fi
